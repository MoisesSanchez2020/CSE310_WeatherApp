const express = require('express');
require('dotenv').config();

const path = require('path');
const mongoose = require('mongoose');
const axios = require('axios');

const app = express();
const port = process.env.PORT || 3000; // Use environment variable for port or default to 3000

// Connect to MongoDB Atlas
mongoose.connect(process.env.DB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    dbName: 'WeatherApp' // Specify the database name directly as a string
}).then(() => {
    console.log('Connected to MongoDB Atlas');
}).catch((error) => {
    console.error('MongoDB connection error:', error.message);
});


// Serve static files from 'public' directory
app.use(express.static(path.join(__dirname, 'public')));

// Middleware to parse JSON
app.use(express.json());

// Route to serve the main page (index.html)
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Route to get weather data by city name
app.get('/weather/:city', async (req, res) => {
    try {
        const { city } = req.params;
        const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.OPENWEATHER_API_KEY}`;

        console.log("Requesting URL:", url); // Log the URL

        const response = await axios.get(url);

        console.log("API Response:", response.data); // Log the response data

        res.json(response.data);
    } catch (error) {
        console.error('Error fetching weather data:', error.message); // Log the error message
        res.status(500).json({ message: 'Error fetching weather data' });
    }
});

// Start the server
app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});
